reset;
option presolve 0;
option solver cplexamp;
option cplex_options 'outlev=1 mipdisplay=4 threads=1 presolve=0 sensitivity';
option solver_msg 0;

suffix up OUT;
suffix down OUT;
suffix current OUT;

model stabgc.mod;
model diversification.mod;

data stabgc.dat;

display card(E);
display card(R);
display card(B);

display D_R;
display D_B;

param STOP default 0;

###
#
###

let ID := 1.. card(V);

for{r in R}{
	let CURRENT_ID := CURRENT_ID + 1;
	let COLUMNS_R[CURRENT_ID] := {r};
};
for{b in B}{
	let CURRENT_ID := CURRENT_ID + 1;
	let COLUMNS_B[CURRENT_ID] := {b};
};



param ITERATION default 0;
printf"%6s%6s%6s%6s%15s%15s%15s%15s%15s%15s\n", 'ITE', 'STEP', 'NCOLS', 'ECOLS', 'OBJ', 'RC', 'UB', 'BUNDLE_UB', 'FEAS', 'OPT';
problem master;

param TOL := 1e-1;
param STEP symbolic default '';
param LB default 0;


# phi star of the paper, the best known
param PHI_PI default 0;
param PHI_B_PI default 1e20;

# the current value
param PHI_PI_BAR default 1e20;

param PHI_DOT_B default 0;

param C_DOT_X default 0;

param M := 0.1;

param SCORE := (PHI_PI - PHI_PI_BAR) - m*(PHI_B_PI - PHI_PI_BAR);

param MOD default 0;
### ### ### ### ### ### ### 
# RC convention : c - pi.b 
### ### ### ### ### ### ### 


repeat{
	let ITERATION := ITERATION+1;
	# solve master
	problem master;
	close master.log;
	solve master_obj > master.log;
	
	let C_DOT_X := c_dot_x;
	
	let{r in R} FEAS_R[r] := 1-sum{id in ID}( if r in COLUMNS_R[id] then x[id] else 0);
	let{b in B} FEAS_B[b] := 1-sum{id in ID}( if b in COLUMNS_B[id] then x[id] else 0);

	let{r in R}PI_R[r] := cover_r[r].dual;
	let{b in B}PI_B[b] := cover_b[b].dual;
	
	let{r in R}DUAL_FOR_R[r] := (PI_R[r]+fake_ctr.dual);
	let{b in B}DUAL_FOR_B[b] := (PI_B[b]+fake_ctr.dual);
	
	let PHI_DOT_B := sum{r in R}PI_R[r] + sum{b in B}PI_B[b];
	let PHI_B_PI := PHI_DOT_B + B_BAR * fake_ctr.dual;

	
	#display DUAL_FOR_R, DUAL_FOR_B;
	problem slave;
	close slave.log;
	
	let PHI_PI := B_BAR*rc_pi;
	
	if FEAS_ERROR <= 1e-6 and abs(PHI_DOT_B - PHI_PI_BAR)<1e-6 then{
		let STOP := 1;
	} else {
		solve reduced_cost > slave.log;

		let TMP_R := {r in R: yR[r]>0.5};
		let TMP_B := {b in B: yB[b]>0.5};
		
		include add_tmp.run;		
		###
		# DIVERSIFICATION
		###
		# include diversification.run;		
		if SCORE <= 0 or ITERATION == 1 then{
			let{r in R}CENTER_R[r] := PI_R[r];
			let{b in B}CENTER_B[b] := PI_B[b];
			let STEP := 'SS';
			let PHI_PI_BAR := PHI_PI;
		}else{
			let STEP := 'NS';
		};
	};
	printf "%6d%15.6f%15.6f%15.6f%15.6f%15.6f\n", 
		ITERATION,
		PHI_B_PI,
		PHI_PI,
		PHI_PI_BAR,
		SCORE,
		FEAS_ERROR
		;
}until STOP == 1;

for{id in ID: x[id]>0.5}{
	display x[id];
	display COLUMNS_R[id], COLUMNS_B[id];
};